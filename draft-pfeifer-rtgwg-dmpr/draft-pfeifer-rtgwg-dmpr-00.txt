



Internet Engineering Task Force                          H. Pfeifer, Ed.
Internet-Draft                                              ProtocolLabs
Intended status: Informational                               J. Schueler
Expires: March 22, 2018                               September 18, 2017


                   Dynamic MultiPath Routing Protocol
                      draft-pfeifer-rtgwg-dmpr-00

Abstract

   Insert an abstract: MANDATORY.  This template is for creating an
   Internet Draft.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 22, 2018.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Pfeifer & Schueler       Expires March 22, 2018                 [Page 1]

Internet-Draft          Dynamic MultiPath Routing         September 2017


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   3
     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   3
     1.3.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.4.  Distinction from other Routing Protocols  . . . . . . . .   3
   2.  Behavior  . . . . . . . . . . . . . . . . . . . . . . . . . .   3
     2.1.  Neighbor Detection  . . . . . . . . . . . . . . . . . . .   3
     2.2.  Interface Handling  . . . . . . . . . . . . . . . . . . .   3
     2.3.  Message Handling  . . . . . . . . . . . . . . . . . . . .   3
     2.4.  Policies  . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.5.  Route Selection . . . . . . . . . . . . . . . . . . . . .   4
     2.6.  Network Retraction  . . . . . . . . . . . . . . . . . . .   4
     2.7.  Other...  . . . . . . . . . . . . . . . . . . . . . . . .   4
   3.  Message Format  . . . . . . . . . . . . . . . . . . . . . . .   4
     3.1.  Header  . . . . . . . . . . . . . . . . . . . . . . . . .   4
       3.1.1.  Preamble  . . . . . . . . . . . . . . . . . . . . . .   4
       3.1.2.  Extension Header  . . . . . . . . . . . . . . . . . .   5
       3.1.3.  Payload . . . . . . . . . . . . . . . . . . . . . . .   5
         3.1.3.1.  Payload: Keep-Alive . . . . . . . . . . . . . . .   6
         3.1.3.2.  Payload: Compressed JSON  . . . . . . . . . . . .   6
         3.1.3.3.  Payload: Fragmentation  . . . . . . . . . . . . .   6
     3.2.  JSON Payload  . . . . . . . . . . . . . . . . . . . . . .   7
       3.2.1.  Full Update . . . . . . . . . . . . . . . . . . . . .  10
       3.2.2.  Partial Update  . . . . . . . . . . . . . . . . . . .  10
       3.2.3.  Keep Alive  . . . . . . . . . . . . . . . . . . . . .  10
     3.3.  Requests  . . . . . . . . . . . . . . . . . . . . . . . .  10
     3.4.  Reflections . . . . . . . . . . . . . . . . . . . . . . .  11
   4.  Data Structures . . . . . . . . . . . . . . . . . . . . . . .  11
   5.  Optional Features . . . . . . . . . . . . . . . . . . . . . .  11
     5.1.  Asymmetric Link Detection . . . . . . . . . . . . . . . .  11
     5.2.  Full Only Mode  . . . . . . . . . . . . . . . . . . . . .  11
   6.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .  11
   7.  Simple List . . . . . . . . . . . . . . . . . . . . . . . . .  11
   8.  Subsections and Tables  . . . . . . . . . . . . . . . . . . .  11
     8.1.  A Subsection  . . . . . . . . . . . . . . . . . . . . . .  11
     8.2.  Tables  . . . . . . . . . . . . . . . . . . . . . . . . .  11
   9.  More about Lists  . . . . . . . . . . . . . . . . . . . . . .  12
     9.1.  Numbering Lists across Lists and Sections . . . . . . . .  12
     9.2.  Where the List Numbering Continues  . . . . . . . . . . .  13
   10. Example of Code or MIB Module To Be Extracted . . . . . . . .  13
   11. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  14
   12. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  14
   13. Security Considerations . . . . . . . . . . . . . . . . . . .  15
   14. References  . . . . . . . . . . . . . . . . . . . . . . . . .  15
     14.1.  Normative References . . . . . . . . . . . . . . . . . .  15
     14.2.  Informative References . . . . . . . . . . . . . . . . .  15



Pfeifer & Schueler       Expires March 22, 2018                 [Page 2]

Internet-Draft          Dynamic MultiPath Routing         September 2017


   Appendix A.  Policies . . . . . . . . . . . . . . . . . . . . . .  15
     A.1.  Low Loss Policy . . . . . . . . . . . . . . . . . . . . .  16
     A.2.  High Bandwidth Policy . . . . . . . . . . . . . . . . . .  16
   Appendix B.  Tuneables  . . . . . . . . . . . . . . . . . . . . .  16
   Appendix C.  Examples . . . . . . . . . . . . . . . . . . . . . .  16
   Appendix D.  Additional Stuff . . . . . . . . . . . . . . . . . .  16
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  16

1.  Introduction

   this is dmpr, why we built it and what it can be used for

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

1.2.  Terminology

   whats a policy, metric, link, link attribute, router, network

1.3.  Overview

   how does it work from a bird's eye perspective

1.4.  Distinction from other Routing Protocols

   why this protocol?

2.  Behavior

2.1.  Neighbor Detection

   how do we find neighbors

2.2.  Interface Handling

   How do we handle multiple interfaces

2.3.  Message Handling

   how do we process the messages from neighbors








Pfeifer & Schueler       Expires March 22, 2018                 [Page 3]

Internet-Draft          Dynamic MultiPath Routing         September 2017


2.4.  Policies

   how do the policies come into the play

2.5.  Route Selection

   how do we select the best route

2.6.  Network Retraction

   what happens with retracted networks

2.7.  Other...

   TODO: how does the network handle: different network conditions,
   disappearing and reappearing nodes,

3.  Message Format

3.1.  Header

   A DMPR packet consists of a preamble, followed by zero or more
   Extension Headers followed by zero or one Payload.  Each Extension
   Header and Payload is defined by a Type.

         +---------+--------------------------------------------+
         |   Type  |                    Use                     |
         +---------+--------------------------------------------+
         |  0-119  |              Extension Header              |
         | 120-127 | Extension Header, reserved for private use |
         | 128-247 |                  Payload                   |
         | 248-255 |     Payload, reserved for private use      |
         +---------+--------------------------------------------+

                 Possible Types are further defined below

                          Table 1: Possible Types

3.1.1.  Preamble

   The preamble of a DMPR packet is as follows










Pfeifer & Schueler       Expires March 22, 2018                 [Page 4]

Internet-Draft          Dynamic MultiPath Routing         September 2017


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Magic| Reserved|    NextType   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                         The preamble of a packet

   Magic
      A 3-bit Magic: 0b010

   Reserved
      Reserved for future use

   NextType
      The type of the next header or payload.

3.1.2.  Extension Header

   An Extension Header consists of the type immediately following this
   header, a length specifier, and the Extension Header data.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    NextType   |     Length    |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
   |                                                               |
   +                              Data                             +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   NextType
      The type of the immediately following header or payload (as
      specified in the packet preamble description)

   Length
      8-bit unsigned integer: The length of the Data field in 2-octets

   Data
      The header-specific data.

3.1.3.  Payload

   The Payload consists of the data until the end of the packet.
   Payloads may be recursive, i.e. contain a valid packet (or parts of
   it) in themselves, payload processors therefore MUST have the ability
   to feed their result back into the message processing chain.



Pfeifer & Schueler       Expires March 22, 2018                 [Page 5]

Internet-Draft          Dynamic MultiPath Routing         September 2017


3.1.3.1.  Payload: Keep-Alive

   Type: 128

   This is a keep-alive packet, the payload length is zero.
   Implementations SHOULD reset the message hold timer for the sending
   node upon receiving a keep-alive packet

3.1.3.2.  Payload: Compressed JSON

   Type: 129

   LZMA-compressed standard-compliant JSON data (TODO RFC 7159) This is
   the main routing data, its structure is defined TODO: ref

3.1.3.3.  Payload: Fragmentation

   Type: 130

   A packet greater than the MTU between two nodes SHOULD be fragmented
   using the fragmentation payload.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Identifier  |L|Packet offset|                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
   |                            Payload                            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                     The Fragmentation Payload Header

   Identifier
      Identifies possibly concurrent fragmented packets.
      Implementations SHOULD use an incrementing counter to practically
      eliminate the possibility of a collision.

   L(ast)
      Last, set to 1 if this packet has the highest packet offset in
      this fragmentation collection, i.e. is the last packet.

   Packet index
      7-bit unsigned integer.  Defines the index of this packet in the
      list of fragments resulting in the fragmentation of the original
      packet.  The first packet has offset zero.

   When a packet is larger than the MTU of the link between two nodes it
   SHOULD be fragmented.  For this the sending node computes the maximum



Pfeifer & Schueler       Expires March 22, 2018                 [Page 6]

Internet-Draft          Dynamic MultiPath Routing         September 2017


   effective payload size for packets sent (i.e MTU less preamble,
   possibly extension headers and the fragmentation header) and splits
   the original packet into parts with this size.  For each of this
   parts it sends a packet with the fragmentation header set to a common
   Identifier, an according packet offset and the LAST bit set for the
   last fragment.

   The receiving node keeps track of all received fragments, grouping
   them by source address and Identifier.  As soon as a all fragments of
   a packet have been received, the reconstructed packet MUST be fed
   back into the message processing chain as if it were a new, just
   received packet.  Fragments MUST be regularly purged based on a hold
   timer.

3.2.  JSON Payload

   A JSON payload is a lzma-compressed, ascii-7 encoded JSON object.  A
   sending node SHOULD use ascii-encoding for the json data, a receiving
   node MUST be able to decode UTF-8 encoded data

   wording:

   REQUIRED
      This field is required, the sending node MUST include it.

   REQUIRED if not empty
      If the field would be empty, it can be omitted, otherwise it is
      REQUIRED

   OPTIONAL
      This field can be inserted to activate specific features or use
      other functionality.  A sending node can choose to omit it and a
      receiving node MUST be able to work without this field.


















Pfeifer & Schueler       Expires March 22, 2018                 [Page 7]

Internet-Draft          Dynamic MultiPath Routing         September 2017


   General Message Structure in JSON compatible YAML v1.2

   ---
   id: <NODE_ID>
   seq: <SEQUENCE_NUMBER>
   type: <TYPE>
   partial-base: <SEQUENCE_NUMBER>

   addr-v4: <IPv4_ADDRESS>
   addr-v6: <IPv6_ADDRESS>
   networks:
     <IPvX_NETWORK>:
     <IPvX_NETWORK>:
       retracted: true
   routing-data:
     <POLICY>:
       <NODE_ID>:
         path: <PATH>
   node-data:
     <NODE_ID>:
       networks:
         <IPvX_NETWORK>:
         <IPvX_NETWORK>:
           retracted: true
   link-attributes:
     <LINK_ATTRIBUTE_ID>:
       <LINK_ATTRIBUTE>: <METRIC>

   request-full:
     - true
     - <NODE_ID>

   reflect:
     <REFLECT_DATA>: <DATA>

   reflected:
     <NODE_ID>:
       <REFLECT_DATA>: <DATA>

   Key and value description:

   id
      string: The sending node's id, NODE_ID: MUST NOT contain any of
      the brackets: ()[]{}<>

   seq
      integer: The message sequence number, strictly monotonically
      increasing



Pfeifer & Schueler       Expires March 22, 2018                 [Page 8]

Internet-Draft          Dynamic MultiPath Routing         September 2017


   type
      string: The type of the message, further specified below TODO ref

   partial-base
      integer: The base message of a partial update, the message then
      only includes the difference between the actual data and the base
      message

   addr-v4
      string: The IPv4 address of the sending node over the link this
      packet has been sent.

   addr-v6
      string: The IPv6 address of the sending node over the link this
      packet has been sent.

   networks
      object: The networks advertised by this node.  The keys are valid
      IPv4/IPv6 Network identifications with subnet prefix.  If the
      value of a network key is a object itself and the key "retracted"
      of this object is set to true, the network MUST be handled as
      retracted, see TODO ref retraction

   routing-data
      object: A path to each reachable node for each policy.  POLICY is
      the name of a policy defined in the sending node.  If the
      receiving node does not understand this policy the entry MUST be
      ignored.  PATH: a path to a node described according to this
      syntax:

   path = node [node-id ">[" link-attribute-id "]>" path]
   node-id = *ALPHA
   link-attribute-id = *DIGIT

   node-data
      object: a list of networks for each reachable node defined in
      "routing-data". "networks" is handled like "networks" defined
      above

   link-attributes
      object: the set of link-attributes used in the paths of routing-
      data.  Each key SHOULD be an integer and MUST NOT contain any of
      the brackets ()[]{}<> the value of a entry is itself a object
      containing LINK_ATTRIBUTE: METRIC pairs where LINK_ATTRIBUTE is
      the name of a link attribute and metric is its value as defined in
      Terminology TODO ref

   request-full



Pfeifer & Schueler       Expires March 22, 2018                 [Page 9]

Internet-Draft          Dynamic MultiPath Routing         September 2017


      array or true: A list of NODE_IDs from which the sending node
      requests a full update message.  If true the node requests a full
      update from all neighbors.

   reflect
      object: arbitrary data the sending node wants to have included in
      the "reflected" object in the next message of the receiver

   reflected
      object: a set of reflected data, contains, for each neighboring
      node the data the node requested to reflect.

3.2.1.  Full Update

   A full update SHOULD replace all data from the sending node in the
   receivers Information Base, it MUST NOT require any previous
   knowledge of the sender by the receiver.  The following keys are
   specified:

   addr-v4
      string, REQUIRED: The IPv4 address of the sending node over the
      link this packet has been sent.

   addr-v6
      string: REQUIRED: The IPv6 address of the sending node over the
      link this packet has been sent.

      Note: only one of addr-v4 and addr-v6 is required

   networks
      object, REQUIRED if not empty: The networks advertised by this
      node, see above

   routing-data  object, REQUIRED if not empty:

3.2.2.  Partial Update

   fields and description of a partial update

3.2.3.  Keep Alive

   keepalive

3.3.  Requests

   fields and description of full-update requests





Pfeifer & Schueler       Expires March 22, 2018                [Page 10]

Internet-Draft          Dynamic MultiPath Routing         September 2017


3.4.  Reflections

   fields and description of reflections

4.  Data Structures

   Every router uses these data structures as Routing and Forward
   Information Base

5.  Optional Features

5.1.  Asymmetric Link Detection

   How should asymmetric link detection work/how can it be implemented

5.2.  Full Only Mode

   when/how to switch the mode

6.  Introduction

   The original specification of xml2rfc format is in RFC 2629
   [RFC2629].

7.  Simple List

   List styles: 'empty', 'symbols', 'letters', 'numbers', 'hanging',
   'format'.

   o  First bullet

   o  Second bullet

   You can write text here as well.

8.  Subsections and Tables

8.1.  A Subsection

   By default 3 levels of nesting show in table of contents but that can
   be adjusted with the value of the "tocdepth" processing instruction.

8.2.  Tables

   .. are very similar to figures:






Pfeifer & Schueler       Expires March 22, 2018                [Page 11]

Internet-Draft          Dynamic MultiPath Routing         September 2017


     Tables use ttcol to define column headers and widths.  Every cell
                  then has a "c" element for its content.

                          +----------+----------+
                          | ttcol #1 | ttcol #2 |
                          +----------+----------+
                          |   c #1   |   c #2   |
                          |   c #3   |   c #4   |
                          |   c #5   |   c #6   |
                          +----------+----------+

                      which is a very simple example.

                       Table 2: A Very Simple Table

9.  More about Lists

   Lists with 'hanging labels': the list item is indented the amount of
   the hangIndent:

   short   With a label shorter than the hangIndent.

   fantastically long label  With a label longer than the hangIndent.

   vspace_trick
           Forces the new item to start on a new line.

   Simulating more than one paragraph in a list item using <vspace>:

   a.  First, a short item.

   b.  Second, a longer list item.

       And something that looks like a separate pararaph..

   Simple indented paragraph using the "empty" style:

      The quick, brown fox jumped over the lazy dog and lived to fool
      many another hunter in the great wood in the west.

9.1.  Numbering Lists across Lists and Sections

   Numbering items continuously although they are in separate <list>
   elements, maybe in separate sections using the "format" style and a
   "counter" variable.

   First list:




Pfeifer & Schueler       Expires March 22, 2018                [Page 12]

Internet-Draft          Dynamic MultiPath Routing         September 2017


   R1  #1

   R2  #2

   R3  #3

   Specify the indent explicitly so that all the items line up nicely.

   Second list:

   R4  #4

   R5  #5

   R6  #6

9.2.  Where the List Numbering Continues

   List continues here.

   Third list:

   R7  #7

   R8  #8

   R9  #9

   R10 #10

   The end of the list.

10.  Example of Code or MIB Module To Be Extracted


















Pfeifer & Schueler       Expires March 22, 2018                [Page 13]

Internet-Draft          Dynamic MultiPath Routing         September 2017


   The <artwork> element has a number of extra attributes that can be
   used to substitute a more aesthetically pleasing rendition into HTML
   output while continuing to use the ASCII art version in the text and
   nroff outputs (see the xml2rfc README for details).  It also has a
   "type" attribute.  This is currently ignored except in the case
   'type="abnf"'.  In this case the "artwork" is expected to contain a
   piece of valid Augmented Backus-Naur Format (ABNF) grammar.  This
   will be syntax checked by xml2rfc and any errors will cause a fatal
   error if the "strict" processing instruction is set to "yes".  The
   ABNF will also be colorized in HTML output to highlight the syntactic
   components.  Checking of additional "types" may be provided in future
   versions of xml2rfc.


   /**** an example C program */

   #include <stdio.h>

   void
   main(int argc, char *argv[])
   {
      int i;

      printf("program arguments are:\n");
      for (i = 0; i < argc; i++) {
          printf("%d: \"%s\"\n", i, argv[i]);
      }

      exit(0);
   } /* main */

   /* end of file */


11.  Acknowledgements

   This template was derived from an initial version written by Pekka
   Savola and contributed by him to the xml2rfc project.

   This document is part of a plan to make xml2rfc indispensable
   [DOMINATION].

12.  IANA Considerations

   This memo includes no request to IANA.

   All drafts are required to have an IANA considerations section (see
   Guidelines for Writing an IANA Considerations Section in RFCs



Pfeifer & Schueler       Expires March 22, 2018                [Page 14]

Internet-Draft          Dynamic MultiPath Routing         September 2017


   [RFC5226] for a guide).  If the draft does not require IANA to do
   anything, the section contains an explicit statement that this is the
   case (as above).  If there are no requirements for IANA, the section
   will be removed during conversion into an RFC by the RFC Editor.

13.  Security Considerations

   All drafts are required to have a security considerations section.
   See RFC 3552 [RFC3552] for a guide.

14.  References

14.1.  Normative References

   [min_ref]  authSurName, authInitials., "Minimal Reference", 2006.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

14.2.  Informative References

   [DOMINATION]
              Mad Dominators, Inc., "Ultimate Plan for Taking Over the
              World", 1984, <http://www.example.com/dominator.html>.

   [RFC2629]  Rose, M., "Writing I-Ds and RFCs using XML", RFC 2629,
              DOI 10.17487/RFC2629, June 1999,
              <https://www.rfc-editor.org/info/rfc2629>.

   [RFC3552]  Rescorla, E. and B. Korver, "Guidelines for Writing RFC
              Text on Security Considerations", BCP 72, RFC 3552,
              DOI 10.17487/RFC3552, July 2003,
              <https://www.rfc-editor.org/info/rfc3552>.

   [RFC5226]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", RFC 5226,
              DOI 10.17487/RFC5226, May 2008,
              <https://www.rfc-editor.org/info/rfc5226>.

Appendix A.  Policies

   many exchangeable policies







Pfeifer & Schueler       Expires March 22, 2018                [Page 15]

Internet-Draft          Dynamic MultiPath Routing         September 2017


A.1.  Low Loss Policy

   use path with lowest overall loss

A.2.  High Bandwidth Policy

   use path with highest bandwidth

Appendix B.  Tuneables

   The different magic values and what they affect, how they could/
   should be set

Appendix C.  Examples

   Examples

Appendix D.  Additional Stuff

   This becomes an Appendix.

Authors' Addresses

   Hagen Paul Pfeifer (editor)
   ProtocolLabs
   Agnes Bernauer Str. 84
   Munich  80687
   DE

   Phone: +49 174 54 55 209
   Email: hagen@jauu.net
   URI:   http://www.jauu.net/


   Joshua Schueler
















Pfeifer & Schueler       Expires March 22, 2018                [Page 16]
